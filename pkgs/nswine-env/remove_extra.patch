diff --git a/nswine/nswine.go b/nswine/nswine.go
index 87a462e3660..d147e448817 100644
--- a/nswine.go
+++ b/nswine.go
@@ -33,17 +33,12 @@ package main
 
 import (
 	"bytes"
-	"errors"
 	"flag"
 	"fmt"
-	"io/fs"
-	"iter"
 	"log/slog"
-	"maps"
 	"os"
 	"os/exec"
 	"path/filepath"
-	"slices"
 	"strconv"
 	"strings"
 	"time"
@@ -87,7 +82,7 @@ func run() error {
 
 	slog.Info("getting wine version")
 	var wineBuildID string
-	if buf, err := exec.Command(filepath.Join(*Prefix, "bin/wine"), "--version").Output(); err != nil {
+	if buf, err := exec.Command(filepath.Join(*Prefix, "bin/wine64"), "--version").Output(); err != nil {
 		if xx, ok := err.(*exec.ExitError); ok {
 			err = fmt.Errorf("%v (stderr: %q)", err, xx.Stderr)
 		}
@@ -112,501 +107,62 @@ func run() error {
 		return err
 	}
 
-	if *Optimize {
-		slog.Info("removing non-essential executables")
-		if err := filepath.WalkDir(filepath.Join(*Prefix, "bin"), func(path string, d fs.DirEntry, err error) error {
-			if err != nil {
-				return err
-			}
-			if d.IsDir() {
-				return nil
-			}
-			switch d.Name() {
-			case "wine":
-				return nil
-			case "wineserver":
-				return nil
-			}
-			slog.Debug("delete", "path", path)
-			return os.Remove(path)
-		}); err != nil {
-			return err
-		}
-	}
-
-	slog.Info("removing manpages")
-	if err := os.RemoveAll(filepath.Join(*Prefix, "share/man")); err != nil {
-		return err
-	}
-	slog.Info("removing doc")
-	if err := os.RemoveAll(filepath.Join(*Prefix, "share/doc")); err != nil {
-		return err
-	}
-	slog.Info("removing desktop entries")
-	if err := os.RemoveAll(filepath.Join(*Prefix, "share/applications")); err != nil {
-		return err
-	}
-	slog.Info("removing headers")
-	if err := os.RemoveAll(filepath.Join(*Prefix, "include")); err != nil {
-		return err
-	}
-
-	slog.Info("removing static libs")
-	if err := filepath.WalkDir(filepath.Join(*Prefix, "lib/wine"), func(path string, d fs.DirEntry, err error) error {
-		if err != nil {
-			return err
-		}
-		if d.IsDir() {
-			return nil
-		}
-		if filepath.Ext(path) != ".a" {
-			return nil
-		}
-		return os.Remove(path)
-	}); err != nil {
-		return err
-	}
-
-	slog.Info("removing directshow filters")
-	if err := filepath.WalkDir(filepath.Join(*Prefix, "lib/wine"), func(path string, d fs.DirEntry, err error) error {
-		if err != nil {
-			return err
-		}
-		if d.IsDir() {
-			return nil
-		}
-		if filepath.Ext(path) != ".ax" {
-			return nil
-		}
-		slog.Debug("delete", "path", path)
-		return os.Remove(path)
-	}); err != nil {
-		return err
-	}
-
-	slog.Info("removing control panel items")
-	if err := filepath.WalkDir(filepath.Join(*Prefix, "lib/wine"), func(path string, d fs.DirEntry, err error) error {
-		if err != nil {
-			return err
-		}
-		if d.IsDir() {
-			return nil
-		}
-		if filepath.Ext(path) != ".cpl" {
-			return nil
-		}
-		slog.Debug("delete", "path", path)
-		return os.Remove(path)
-	}); err != nil {
-		return err
-	}
-
-	slog.Info("removing wine-mono and wine-gecko stubs")
-	if err := filepath.WalkDir(filepath.Join(*Prefix, "lib/wine"), func(path string, d fs.DirEntry, err error) error {
-		if err != nil {
-			return err
-		}
-		if d.IsDir() {
-			return nil
-		}
-		if !strings.HasPrefix(d.Name(), "mscoree.") && !strings.HasPrefix(d.Name(), "mshtml.") {
-			return nil
-		}
-		slog.Debug("delete", "path", path)
-		return os.Remove(path)
-	}); err != nil {
-		return err
-	}
-
-	slog.Info("removing winemenubuilder")
-	if err := filepath.WalkDir(filepath.Join(*Prefix, "lib/wine"), func(path string, d fs.DirEntry, err error) error {
-		if err != nil {
-			return err
-		}
-		if d.IsDir() {
-			return nil
-		}
-		if !strings.HasPrefix(d.Name(), "winemenubuilder.") {
-			return nil
-		}
-		slog.Debug("delete", "path", path)
-		return os.Remove(path)
-	}); err != nil {
-		return err
-	}
-
-	if *Optimize {
-		slog.Info("removing unnecessary drivers")
-		if err := filepath.WalkDir(filepath.Join(*Prefix, "lib/wine"), func(path string, d fs.DirEntry, err error) error {
-			if err != nil {
-				return err
-			}
-			if d.IsDir() {
-				return nil
-			}
-			switch filepath.Ext(path) {
-			case ".sys":
-			case ".drv":
-			default:
-				return nil
-			}
-			switch filepath.Base(path) {
-			default:
-				return fmt.Errorf("TODO: is the driver %s needed?", path)
-			case "msacm32.drv":
-				return nil // keep
-			case "mountmgr.sys":
-				return nil // keep mountmgr since it's used internally for a lot of stuff (e.g., virtual drive info, creating links)
-			case "ksecdd.sys":
-			case "winspool.drv":
-			case "winebus.sys":
-			case "tdi.sys":
-			case "usbd.sys":
-			case "nsiproxy.sys":
-			case "cng.sys":
-			case "ndis.sys":
-			case "http.sys":
-			case "mouhid.sys":
-			case "winehid.sys":
-			case "hidparse.sys":
-			case "winepulse.drv":
-			case "wineusb.sys":
-			case "wineps.drv":
-			case "scsiport.sys":
-			case "fltmgr.sys":
-			case "winealsa.drv":
-			case "winexinput.sys":
-			case "winex11.drv":
-			case "hidclass.sys":
-			case "winebth.sys":
-			case "wmilib.sys":
-			case "netio.sys":
-			case "winewayland.drv":
-			}
-			slog.Debug("removing driver", "name", filepath.Base(path))
-			return os.Remove(path)
-		}); err != nil {
-			return err
-		}
-	}
-
-	if *Optimize {
-		slog.Info("removing wow64 libs")
-		if err := os.RemoveAll(filepath.Join(*Prefix, "lib/wine/i386-windows")); err != nil && !errors.Is(err, os.ErrNotExist) {
-			return err
-		}
-		if err := os.RemoveAll(filepath.Join(*Prefix, "lib/wine/i386-unix")); err != nil && !errors.Is(err, os.ErrNotExist) {
-			return err
-		}
-
-		slog.Info("removing unnecessary libs")
-		if err := filepath.WalkDir(filepath.Join(*Prefix, "lib/wine"), func(path string, d fs.DirEntry, err error) error {
-			if err != nil {
-				return err
-			}
-			if d.IsDir() {
-				return nil
-			}
-			if !slices.ContainsFunc([]string{
-				// d3d/d2d/ddraw/dmusic/opengl/opencl/vulkan stuff (it's big,
-				// and it's definitely completely useless without the
-				// non-nulldrv graphics drivers anyways)
-				"d3d",
-				"d2d",
-				"dxgi",
-				"ddraw",
-				"dmusic",
-				"dplay",
-				"qedit",
-				"winevulkan",
-				"wined3d",
-				"opencl",
-				"opengl",
-				"vulkan",
-
-				// xaudio/xactengine/xapofx/x3daudio
-				"xaudio",
-				"xactengine",
-				"xapofx",
-				"x3daudio",
-
-				// wow64
-				"wow64",
-
-				// some more interactive stuff
-				"comdlg32.",
-				"riched20.",
-				"ieframe.",
-				"ieproxy.",
-				"browseui.",
-				"scrrun.",
-				"cryptdlg.",
-				"rasdlg.",
-				"scarddlg.",
-				"hhctrl.",
-				"dhtmled.",
-				"regedit.",
-				"mshta.",
-
-				// print/scan/telephony/smartcard/media/speech/webcam stuff
-				"tapi32.",
-				"sane.",
-				"twain_32.",
-				"gphoto2.",
-				"wiaservc.",
-				"sapi.",
-				"twinapi.",
-				"winprint.",
-				"localspl.",
-				"winscard.",
-				"ctapi32.",
-				"winegstreamer.",
-				"wmphoto.",
-				"msttsengine.",
-				"qcap.",
-				"wmp.",
-				"windows.gaming.input.",
-				"windows.media.speech.",
-				"mfmediaengine.",
-				"mfreadwrite.",
-
-				// misc
-				"msi.",
-				"wscript.",
-				"cscript.",
-				"jscript.",
-				"vbscript.",
-				"dwrite.",
-				"gdiplus.",
-				"winhlp32.",
-				"oledb32.",
-				"odbc32.",
-				"l3codeca.",
-				"wpcap.",
-			}, func(x string) bool {
-				return strings.HasPrefix(d.Name(), x)
-			}) {
-				return nil
-			}
-			slog.Debug("removing", "name", d.Name())
-			return os.Remove(path)
-		}); err != nil {
-			return err
-		}
-
-		if arm64 {
-			slog.Info("removing 32-bit arm support")
-			for _, name := range []string{
-				"lib/libqemu-arm.so",
-				"lib/libqemu-i386.so",
-				"lib/libqemu-x86_64.so",
-				"lib/wine/aarch64-unix/wowarmhw.so",
-				"lib/wine/aarch64-unix/wowarmhw.so",
-				"lib/wine/aarch64-windows/lib/wowarmhw.dll",
-				"lib/wine/aarch64-windows/lib/wowarmhw.dll",
-			} {
-				path := filepath.Join(*Prefix, name)
-				slog.Debug("delete", "path", path)
-				if err := os.RemoveAll(path); err != nil {
-					return err
-				}
-			}
-		} else {
-			slog.Info("removing 32-bit support")
-			for _, name := range []string{
-				"lib/wine/aarch64-windows/lib/wow64cpu.dll",
-			} {
-				path := filepath.Join(*Prefix, name)
-				slog.Debug("delete", "path", path)
-				if err := os.RemoveAll(path); err != nil {
-					return err
-				}
-			}
-		}
-
-		slog.Info("removing dlls/exes which depend on removed stuff")
-		if err := func() error {
-			dir := filepath.Join(*Prefix, "lib/wine", archt("x86_64-windows", "aarch64-windows"))
-
-			dis, err := os.ReadDir(dir)
-			if err != nil {
-				return err
-			}
-
-			uncase := map[string]string{}
-			for _, di := range dis {
-				uncase[strings.ToLower(di.Name())] = di.Name()
-			}
-
-			dlldeps := map[string][]string{}
-			for _, di := range dis {
-				if di.IsDir() {
-					continue
-				}
-				switch filepath.Ext(di.Name()) {
-				case ".dll":
-				case ".exe":
-				default:
-					continue
-				}
-				if di.Name() == "explorer.exe" {
-					continue // this one is special
-				}
-				deps, err := peImports(filepath.Join(dir, di.Name()))
-				if err != nil {
-					return fmt.Errorf("get deps for %q: %w", di.Name(), err)
-				}
-				for i, dep := range deps {
-					deps[i] = strings.ToLower(dep)
-				}
-				dlldeps[strings.ToLower(di.Name())] = deps
-				//fmt.Println(di.Name(), deps)
-			}
-
-			var it int
-			for {
-				remove := map[string][]string{}
-				for _, name := range slices.Sorted(maps.Keys(dlldeps)) { // sorted so it's deterministic if there are errors
-					for _, dep := range dlldeps[name] {
-						if _, ok := dlldeps[dep]; !ok {
-							remove[name] = append(remove[name], dep)
-						}
-					}
-				}
-				if len(remove) == 0 {
-					break
-				}
-				for name, deps := range remove {
-					slog.Debug("removing", "iteration", it, "name", name, "broken_deps", deps)
-					if err := os.Remove(filepath.Join(dir, uncase[name])); err != nil {
-						return err
-					}
-					delete(dlldeps, name)
-				}
-				it++
-			}
-			return nil
-		}(); err != nil {
-			return err
-		}
-	}
-
-	slog.Info("patching wine.inf")
-	// 	- mostly so wineboot doesn't complain as much or error out
-	// 	- a little bit of extra tidying
-	if err := transform(filepath.Join(*Prefix, "share/wine/wine.inf"),
-		trdiff(infilt(func(emit func(section string, line string), inf iter.Seq2[string, string]) error {
-			services := "BITS|EventLog|HTTP|MSI|NDIS|NsiProxy|RpcSs|ScardSvr|Spooler|Winmgmt|Sti|PlugPlay|WPFFontCache|LanmanServer|FontCache|TaskScheduler|wuau|Terminal"
-			for section, line := range inf {
-				{
-					var keep bool
-					switch {
-					case strings.HasSuffix(section, "Install.NT"):
-					case strings.HasSuffix(section, "Install.NT.Services"):
-					case (!arm64 || *Optimize) && strings.HasSuffix(section, "Install.ntarm"):
-					case (!arm64 || *Optimize) && strings.HasSuffix(section, "Install.ntarm.Services"):
-					case !arm64 && strings.HasSuffix(section, "Install.ntarm64"):
-					case !arm64 && strings.HasSuffix(section, "Install.ntarm64.Services"):
-					case *Optimize && strings.Contains(section, "CurrentVersionWow64"):
-					case *Optimize && strings.Contains(section, "Wow64Install"):
-					case *Optimize && strings.Contains(section, "FakeDllsWin32"):
-					case *Optimize && strings.Contains(section, "FakeDllsWow64"):
-					case regex(`^(` + services + `)(Services?|ServiceKeys)$`).MatchString(section):
-					default:
-						keep = true
-					}
-					if !keep {
-						continue // ignore entire section
-					}
-				}
-				if line != "" {
-					var keep bool
-					switch {
-					default:
-						keep = true
-					case strings.Contains(line, "winemenubuilder"):
-					case *Optimize && section == "Tapi": // telephony
-					case *Optimize && section == "DirectX":
-					case *Optimize && regex(`CurrentVersionWow64.[^.]+,`).MatchString(line):
-					case regex(`(^|[^a-z])wineps\.drv`).MatchString(line):
-					case regex(`(^|[^a-z])(sane|gphoto2)\.ds`).MatchString(line):
-					case regex(`(^|[^a-z])(input|winebus|winebth|winehid|mouhid|wineusb|winexinput)\.inf`).MatchString(line):
-					case regex(`(^|[^a-z])(oledb32|msdaps|msdasql|msado15|winprint|sapi)\.dll`).MatchString(line):
-					case regex(`(^|[^a-z])(wmplayer|wordpad|iexplore)\.exe`).MatchString(line):
-					case regex(`^system\.ini,\s*(mci|drivers32|mail)`).MatchString(line):
-					case regex(`^AddService=.+,(` + services + `)(Services?)$`).MatchString(section):
-					}
-					if !keep {
-						continue // ignore section contents
-					}
-				}
-				emit(section, line)
-			}
-			return nil
-		})),
-	); err != nil {
-		return err
-	}
-
-	wineEnv := append(os.Environ(), "WINEPREFIX="+*Output, "WINEARCH=win64", "USER=nswrap")
-
-	slog.Info("creating wineprefix")
-	{
-		winedebug := "err-ole,fixme-actctx"
-		if *Debug {
-			winedebug += ",+loaddll"
-			//winedebug += ",+imports"
-			winedebug += ",+module"
-		}
-		cmd := exec.Command(filepath.Join(*Prefix, "bin", "wine"), "wineboot", "--init")
-		cmd.Env = append(slices.Clone(wineEnv), "WINEDEBUG="+winedebug)
-		cmd.Stdout = os.Stdout
-		cmd.Stderr = os.Stdout
-		// TODO: filter out expected err:winediag:nodrv_CreateWindow, err:vulkan:vulkan_init_once, err:win:get_desktop_window
-		if err := cmd.Run(); err != nil {
-			return err
-		}
-		// TODO: fix failure only on -optimize amd64
-		// something to do with https://github.com/wine-mirror/wine/blob/22af42ac22279e6c0c671f033661f95c1761b4bb/dlls/ntdll/unix/env.c#L1952-L1964
-		// there's an i386 binary somewhere getting called by wine.inf, causing wine to try and use the wow64 loader, which we deleted earlier
-	}
-
-	slog.Info("disabling automatic wineprefix updates")
-	if err := os.WriteFile(filepath.Join(*Output, ".update-timestamp"), []byte("disable\n"), 0644); err != nil {
-		return err
-	}
-
-	if *Optimize {
-		// TODO: clean up empty dirs
-	}
-
-	// TODO: replace duplicated files in the prefix with symlinks
-	// TODO: set some registry keys required for nswrap
-
-	// TODO: ensure we have some must-have dlls for northstar
-
-	if *Vendor {
-		// TODO: copy non-libc libraries into our lib dir
-		// TODO: ensure we have some libs we know we need
-	}
-
-	// TODO: remove this
-	filepath.WalkDir(*Prefix, func(path string, d fs.DirEntry, err error) error {
-		slog.Debug("wine file", "path", path)
-		return nil
-	})
-	filepath.WalkDir(*Output, func(path string, d fs.DirEntry, err error) error {
-		slog.Debug("wineprefix file", "path", path)
-		return nil
-	})
-
-	// TODO: replace this with a go impl
-	if tmp, err := exec.Command("du", "-sh", *Prefix).Output(); err == nil {
-		slog.Info(string(bytes.TrimSpace(tmp)))
-	}
-	if tmp, err := exec.Command("du", "-sh", *Output).Output(); err == nil {
-		slog.Info(string(bytes.TrimSpace(tmp)))
-	}
-
-	return errors.ErrUnsupported
+	// slog.Info("patching wine.inf")
+	// // 	- mostly so wineboot doesn't complain as much or error out
+	// // 	- a little bit of extra tidying
+	// if err := transform(filepath.Join(*Prefix, "share/wine/wine.inf"),
+	// 	trdiff(infilt(func(emit func(section string, line string), inf iter.Seq2[string, string]) error {
+	// 		services := "BITS|EventLog|HTTP|MSI|NDIS|NsiProxy|RpcSs|ScardSvr|Spooler|Winmgmt|Sti|PlugPlay|WPFFontCache|LanmanServer|FontCache|TaskScheduler|wuau|Terminal"
+	// 		for section, line := range inf {
+	// 			{
+	// 				var keep bool
+	// 				switch {
+	// 				case strings.HasSuffix(section, "Install.NT"):
+	// 				case strings.HasSuffix(section, "Install.NT.Services"):
+	// 				case (!arm64 || *Optimize) && strings.HasSuffix(section, "Install.ntarm"):
+	// 				case (!arm64 || *Optimize) && strings.HasSuffix(section, "Install.ntarm.Services"):
+	// 				case !arm64 && strings.HasSuffix(section, "Install.ntarm64"):
+	// 				case !arm64 && strings.HasSuffix(section, "Install.ntarm64.Services"):
+	// 				case *Optimize && strings.Contains(section, "CurrentVersionWow64"):
+	// 				case *Optimize && strings.Contains(section, "Wow64Install"):
+	// 				case *Optimize && strings.Contains(section, "FakeDllsWin32"):
+	// 				case *Optimize && strings.Contains(section, "FakeDllsWow64"):
+	// 				case regex(`^(` + services + `)(Services?|ServiceKeys)$`).MatchString(section):
+	// 				default:
+	// 					keep = true
+	// 				}
+	// 				if !keep {
+	// 					continue // ignore entire section
+	// 				}
+	// 			}
+	// 			if line != "" {
+	// 				var keep bool
+	// 				switch {
+	// 				default:
+	// 					keep = true
+	// 				case strings.Contains(line, "winemenubuilder"):
+	// 				case *Optimize && section == "Tapi": // telephony
+	// 				case *Optimize && section == "DirectX":
+	// 				case *Optimize && regex(`CurrentVersionWow64.[^.]+,`).MatchString(line):
+	// 				case regex(`(^|[^a-z])wineps\.drv`).MatchString(line):
+	// 				case regex(`(^|[^a-z])(sane|gphoto2)\.ds`).MatchString(line):
+	// 				case regex(`(^|[^a-z])(input|winebus|winebth|winehid|mouhid|wineusb|winexinput)\.inf`).MatchString(line):
+	// 				case regex(`(^|[^a-z])(oledb32|msdaps|msdasql|msado15|winprint|sapi)\.dll`).MatchString(line):
+	// 				case regex(`(^|[^a-z])(wmplayer|wordpad|iexplore)\.exe`).MatchString(line):
+	// 				case regex(`^system\.ini,\s*(mci|drivers32|mail)`).MatchString(line):
+	// 				case regex(`^AddService=.+,(` + services + `)(Services?)$`).MatchString(section):
+	// 				}
+	// 				if !keep {
+	// 					continue // ignore section contents
+	// 				}
+	// 			}
+	// 			emit(section, line)
+	// 		}
+	// 		return nil
+	// 	})),
+	// ); err != nil {
+	// 	return err
+	// }
+
+	return nil;
 }
